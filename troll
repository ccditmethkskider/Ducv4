_G.AutoFruit = true -- Bật/tắt auto lấy trái cây
_G.ResetAfterGetFruit = true -- Bật/tắt reset nhân vật sau khi lấy trái

function GetHighestValueFruitInInventory()
    local fruits = {} -- Bảng lưu các trái cây trong kho đồ
    local backpack = game:GetService("Players").LocalPlayer.Backpack -- Kho đồ của người chơi

    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and item:FindFirstChild("BeliValue") then
            table.insert(fruits, {name = item.Name, price = item.BeliValue.Value}) -- Lưu tên và giá trị Beli của trái cây
        end
    end

    -- Sắp xếp trái cây theo giá trị Beli từ cao xuống thấp
    table.sort(fruits, function(a, b)
        return a.price > b.price
    end)

    if #fruits > 0 then
        return fruits[1] -- Trả về trái cây có giá trị cao nhất
    else
        return nil -- Nếu không có trái cây nào
    end
end

function StoreFruit(fruitName)
    -- Gọi hàm lưu trái cây vào kho (phụ thuộc vào game, bạn cần kiểm tra sự kiện thực sự lưu trái)
    local args = {
        [1] = fruitName
    }
    game:GetService("ReplicatedStorage").Remotes.StoreFruit:InvokeServer(unpack(args))
end

function ResetCharacter()
    -- Reset nhân vật bằng cách phá vỡ khớp nối
    game:GetService("Players").LocalPlayer.Character:BreakJoints()
end

-- Main function
while _G.AutoFruit do
    wait(10) -- Chờ 10 giây trước khi thực hiện lại

    local highestFruit = GetHighestValueFruitInInventory() -- Lấy trái có giá trị cao nhất từ kho đồ
    if highestFruit then
        print("Lấy trái cây: " .. highestFruit.name .. " - Giá trị: " .. highestFruit.price)
        StoreFruit(highestFruit.name) -- Lưu vào kho
        if _G.ResetAfterGetFruit then
            ResetCharacter() -- Reset nhân vật
        end
    else
        print("Không có trái cây nào trong kho đồ")
    end
end
